swagger: "2.0"
info:
  title: beego Test API
  description: beego has a very cool tools to autogenerate documents for your API
  version: 1.0.0
  termsOfService: http://beego.me/
  contact:
    email: astaxie@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
basePath: /public
paths:
  /play/addplay:
    post:
      tags:
      - play
      description: POST添加新的玩法信息
      operationId: PlayController.addplay
      parameters:
      - in: body
        name: body
        description: 玩法的json信息
        required: true
        schema:
          $ref: '#/definitions/models.Play'
      responses:
        "200":
          description: '{string} 返回用户的唯一标识符uid'
        "403":
          description: body is empty
  /play/getplayinfo/{id}:
    get:
      tags:
      - play
      description: 获取玩法信息
      operationId: PlayController.getplayinfo
      parameters:
      - in: path
        name: id
        description: 玩法ID
        required: true
        type: string
      responses:
        "200":
          description: '{Object} models.Play'
        "403":
          description: nil
  /user/:
    get:
      tags:
      - user
      description: get all Users
      operationId: UserController.GetAll
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
    post:
      tags:
      - user
      description: create users
      operationId: UserController.CreateUser
      parameters:
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{int} models.User.Id'
        "403":
          description: body is empty
  /user/{uid}:
    get:
      tags:
      - user
      description: get user by uid
      operationId: UserController.Get
      parameters:
      - in: path
        name: uid
        description: The key for staticblock
        required: true
        type: string
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is empty
    put:
      tags:
      - user
      description: update the user
      operationId: UserController.Update
      parameters:
      - in: path
        name: uid
        description: The uid you want to update
        required: true
        type: string
      - in: body
        name: body
        description: body for user content
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: ""
          schema:
            $ref: '#/definitions/models.User'
        "403":
          description: :uid is not int
    delete:
      tags:
      - user
      description: delete the user
      operationId: UserController.Delete
      parameters:
      - in: path
        name: uid
        description: The uid you want to delete
        required: true
        type: string
      responses:
        "200":
          description: '{string} delete success!'
        "403":
          description: uid is empty
  /user/appcheck/{mobile}/{code}:
    get:
      tags:
      - user
      description: 手机号短信登录
      operationId: UserController.appcheck
      parameters:
      - in: path
        name: mobile
        description: 手机号
        required: true
        type: string
      - in: path
        name: code
        description: 验证码
        required: true
        type: string
      responses:
        "200":
          description: '{Object} models.User'
        "403":
          description: nil
  /user/login:
    get:
      tags:
      - user
      description: Logs user into the system
      operationId: UserController.Login
      parameters:
      - in: query
        name: username
        description: The username for login
        required: true
        type: string
      - in: query
        name: password
        description: The password for login
        required: true
        type: string
      responses:
        "200":
          description: '{string} login success'
        "403":
          description: user not exist
  /user/logout:
    get:
      tags:
      - user
      description: Logs out current logged in user session
      operationId: UserController.logout
      responses:
        "200":
          description: '{string} logout success'
  /user/presscode:
    post:
      tags:
      - user
      description: POST获取下注的验证码
      operationId: UserController.presscode
      parameters:
      - in: body
        name: body
        description: 用户的json信息
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: '{string} 返回用户的唯一标识符uid'
        "403":
          description: body is empty
definitions:
  models.Play:
    title: Play
    type: object
    properties:
      GameId:
        description: 玩法ID
        type: string
      Id:
        description: 玩法唯一标志
        type: string
      Level:
        type: string
      Time:
        type: string
  models.Profile:
    title: Profile
    type: object
    properties:
      Address:
        type: string
      Age:
        type: integer
        format: int64
      Email:
        type: string
      Gender:
        type: string
  models.User:
    title: User
    type: object
    properties:
      Code:
        type: string
      Id:
        type: string
      Mobile:
        type: string
      Password:
        type: string
      Profile:
        $ref: '#/definitions/models.Profile'
      Sign:
        type: string
      Username:
        type: string
tags:
- name: user
  description: |
    用户相关接口
- name: play
  description: |
    玩法相关接口
